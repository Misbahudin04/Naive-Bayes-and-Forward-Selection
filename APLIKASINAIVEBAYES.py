#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Oct 03, 2019 02:03:52 PM +07  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import filedialog
from tkinter import *
import APLIKASINAIVEBAYES_support
import pandas as pd
import naivebayes as nbb
import forwardselection as fs
import crossvalidation as cv
import Ujif as uf

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    APLIKASINAIVEBAYES_support.set_Tk_var()
    top = New_Toplevel (root)
    APLIKASINAIVEBAYES_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    APLIKASINAIVEBAYES_support.set_Tk_var()
    top = New_Toplevel (w)
    APLIKASINAIVEBAYES_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None

class New_Toplevel:
    def muatButton(self,p1):
        global v1
        filename = filedialog.askopenfilename(filetypes = (("excel files","*.xlsx"),("all files","*.*")))
        name = filename
        print(name)

        try:
            self.dataset = pd.read_excel(name, header=0)
            self.dcs = self.dataset.copy()
            #print(self.dcs)
            #print(dataset)
            self.muat.configure(text=name)


            v1 = IntVar()
            self.Radiobutton1.configure(state='normal',variable=v1, value=1)
            self.Radiobutton2.configure(state='normal',variable=v1, value=2)

        except:
            self.muat.configure(text= "Dataset Tidak Valid")

    def nbfs(self):
        fss = fs.ForwardSelection(self.dcs)
        rsquare = fss.correlation()  # nilai korelasi
        # print('ini rsquare',rsquare)
        urutanlist = fss.urutan()
        #print('ini urutan',urutanlist)
        # ===========Uji F===========
        labels = self.dcs['Classification']
        features = self.dcs.drop(['Classification'], axis=1)
        fsig = pd.read_excel('data/sfig.xlsx', header=0)
        # print(fsig.head(5))
        UF = uf.UjiF(urutanlist, rsquare, features, labels, fsig, self.dcs)
        UFF = UF.fhitung()
        atribut_terpilih = UF.ftable()
        dcc = UF.datafilter()

    def nonfs(self):
        atributterpilih = []
        i=0
        while i <len(self.dataset.columns)-1:
            atributterpilih.append(i)
            i+=1


        cvv = cv.Crossvalidation(self.dcs, atributterpilih, self.dcs)
        fold = cvv.panggilfold()


    def mulaiButton(self,p1):
        #self.Scrolledtext1.insert(INSERT, "woy")
        # ===========forward selection===========
        if v1.get() == 1:
            self.nonfs()
            self.Scrolledtext1.insert(END, 'Menu 1')
        if v1.get() == 2:
            self.nbfs()
            self.Scrolledtext1.insert(END, 'Menu 2')
        #self.Scrolledtext1.insert(END, self.dcs)

        #self.nbfs()
        pass

    def config(self,a):
        self.g = a
        print(self.g)
        #self.Scrolledtext1.insert(END,g)

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x344+380+172")
        top.title("Klasifikasi Naive Bayes")
        top.configure(background="#d8d8d8")
        top.configure(highlightbackground="#000000")
        top.configure(highlightcolor="#051b63")

        self.Muat = tk.Button(top)
        self.Muat.place(relx=0.133, rely=0.087, height=24, width=47)
        self.Muat.configure(activebackground="#ededed")
        self.Muat.configure(activeforeground="#000000")
        self.Muat.configure(background="#ced845")
        self.Muat.configure(disabledforeground="#a3a3a3")
        self.Muat.configure(foreground="#000000")
        self.Muat.configure(highlightbackground="#d9d9d9")
        self.Muat.configure(highlightcolor="black")
        self.Muat.configure(pady="0")
        self.Muat.configure(text='''Muat''')
        self.Muat.bind('<Button-1>',lambda e:self.muatButton(e))

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.192, rely=0.727, height=24, width=41)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#ced845")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Mulai''')
        self.Button2.bind('<Button-1>',lambda e:self.mulaiButton(e))





        self.Metode = ttk.Label(top)
        self.Metode.place(relx=0.175, rely=0.276, height=19, width=57)
        self.Metode.configure(background="#d9d9d9")
        self.Metode.configure(foreground="#000000")
        self.Metode.configure(font="TkDefaultFont")
        self.Metode.configure(relief="flat")
        self.Metode.configure(text='''Algoritma''')

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.05, rely=0.349, relheight=0.334, relwidth=0.358)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")

        self.Radiobutton1 = tk.Radiobutton(self.Frame1)
        self.Radiobutton1.place(relx=0.0, rely=0.13, relheight=0.217
                , relwidth=0.456)
        self.Radiobutton1.configure(activebackground="#ececec")
        self.Radiobutton1.configure(activeforeground="#000000")
        self.Radiobutton1.configure(background="#d9d9d9")
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(foreground="#000000")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Naive Bayes''')
        self.Radiobutton1.configure(state= 'disabled')





        self.Radiobutton2 = tk.Radiobutton(self.Frame1)
        self.Radiobutton2.place(relx=0.023, rely=0.609, relheight=0.217
                , relwidth=0.921)
        self.Radiobutton2.configure(activebackground="#ececec")
        self.Radiobutton2.configure(activeforeground="#000000")
        self.Radiobutton2.configure(background="#d9d9d9")
        self.Radiobutton2.configure(disabledforeground="#a3a3a3")
        self.Radiobutton2.configure(foreground="#000000")
        self.Radiobutton2.configure(highlightbackground="#d9d9d9")
        self.Radiobutton2.configure(highlightcolor="black")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(text='''Naive Bayes + Forwards Selection''')
        self.Radiobutton2.configure(state='disabled')


        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.058, rely=0.509, relwidth=0.333)

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.383, rely=0.0, height=19, width=128)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(text='''Klasifikasi Naive Bayes''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.45, rely=0.262, relheight=0.672
                , relwidth=0.518)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")







        self.muat = tk.Label(top)
        self.muat.place(relx=0.225, rely=0.087, height=20, relwidth=0.707)
        self.muat.configure(background="white")
        self.muat.configure(disabledforeground="#a3a3a3")
        self.muat.configure(foreground="#000000")
        self.muat.configure(text = "Masukan File Dataset Anda")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





